{"cli":true,"dir":".","openBrowser":true,"outputOnly":true,"no-watch":true,"no-sockets":true,"editor":true,"user":"jleschner","basedir":"/Users/jleschner/pub/doc","pkgJson":{"name":"pub-doc","version":"2.5.0","description":"source for pub-server docs - not a published npm module","main":"pub-config.js","dependencies":{"pub-server":"^2.7.3"},"repository":{"type":"git","url":"git://github.com/jldec/pub-doc.git"},"scripts":{"pub":"pub","test":"pub -S docs","generate":"rm -r docs/* && pub -O"},"author":"JÃ¼rgen Leschner","license":"MIT"},"pkgName":"pub-doc","sources":[{"path":"/Users/jleschner/pub/doc/markdown","writable":true,"name":"markdown","type":"FILE","tmp":"/Users/jleschner/.tmp/markdown","watch":{},"fragmentDelim":true,"files":[{"path":"/000 Introduction.md","text":"---- / ----\ntitle: Introduction\n\n# Introduction\n\n[pub-server](https://github.com/jldec/pub-server), or __pub__ for short, is a static site generator and editor. Content is maintained in markdown, with the ability to compose output pages from multiple markdown fragments.\n\nThe following use-cases are supported:\n\n- Command-line tool for generating static websites\n- Web server for previewing generated HTML locally\n- Web server deployed on a PaaS like Heroku\n\nThe generator+editor can also run in-browser, allowing non-technical users to edit and instantly preview the generated HTML, without first installing pub-server themselves.\n\nBy using markdown text fragments for managing content we are able to simplify the stack (no database to install) as well as provide users with all the benefits of modern tools like github for versioning and collaboration.\n\nThere is no need to compromise on site or page structure just because user content lives in \"style-free\" markdown -- with templates and a little bit of plugin code, any information design and HTML/CSS layout can be supported.\n\npub-server generates finished HTML by combining markdown fragments with clean and fully-extensible handlebars templates. This provides maximal decoupling of user content from developer code and designer presentation.\n\nThe generated output uses npm-installable themes and is fully customizable.\n"},{"path":"/010 How it works.md","text":"# How it works\n\n### tl;dr\nAll text-content lives in **markdown** fragments inside **text** files in one or more **sources**. Fragments in the same file are separated by a delimiter like\n\n    ---- /page-1 ----\n\n**pub-generator** compiles markdown fragments into javascript objects which are rendered to HTML by applying **handlebars templates**.\n\n\n### sources\nSources are directories in your project or inside a theme package. Source directories are scanned, and new files picked up automatically when the source is read.\n\nHandlebars templates live in files in sources just like markdown text. In fact, templates and markdown may live together in the same source file as long as each is clearly identified e.g. (simplified content)\n\n\n    ---- /page-1 ----\n\n    page1 markdown text...\n\n    ---- /main-layout.hbs ----\n\n    <html>{{{renderPage}}}</html>\n\n\n\n### pages and fragments\nThere are 2 kinds of markdown content:\n\n1. **pages** have a \"normal\" page url or href. e.g. `/pages/about-us`\n2. **fragments** have an href with a fragment #id. e.g. `/blog/2014/year-in-review#conclusions`\n\nThe href may be specified in a header at the top of the markdown like the examples above or derived from the source path: E.g. a file `/md/pages/About Us.md` may become `/pages/about-us` assuming `/md` is the source.\n\nFilenames are turned into urls by slugifying i.e. lowercasing and converting non-alphanumeric characters into hyphens.\n\nIn addition to having an href, all pages and fragments may acquire additional metadata from their markdown headers. E.g to set a title for the home page, add the following at the top of the index.md file.\n\n    ---- / ----\n    title: Introduction\n\n    **pub-server** is a lightweight content management tool for publishing on the web\n\n\n### templates and rendering\npub-server invokes compiled templates to render pages.\n\nPage or fragment objects provide the input \"context\" for handlebars. E.g. If a template contains `{{title}}`, handlebars will look for a `.title` property on the current page or fragment object and insert the value of that property into the html output.\n\nTemplate evaluation is performed in a nested manner\n\n- The outer layout template will include a helper like `{{{renderPage}}}`\n- This invokes an inner page template which may render the page markdown using `{{{html}}}` or it may iterate over page-fragments using a block helper like `{{{#eachFragment}}}...{{{/eachFragment}}}`\n\nTemplates may be explicitly specified. E.g. to use an outer template called `hero` instead of the default 'main-layout', specify `layout:hero` in the markdown header. Similarly, to use a page layout called `flow`, specify `template:flow` in the markdown header.\n\n\n### loading\nBefore rendering (or every time a source is modified) the generator does:\n\n- *read* text files in order from all (or just the modified) sources\n- *pre-process* each file into one or more fragments\n- *compile* .md fragments into arrays of javascript objects\n- *compile* .hbs fragments into handlebars templates\n- *emit* events which can trigger additional processing by plugins\n\nPage-fragments are automatically attached to pages during compilation. This makes it easy for templates to iterate over the fragments in a page during rendering.\n"},{"path":"/011 Installation.md","text":"# Installation\n\n### System requirements\n\npub-server was developed with node.js on macOS, so that is the recommended environment.\n\nThe generator works under Windows as well, but there are known issues with the editor and the file system watcher on Windows.\n\n\n### Global install\n\n```sh\nnpm install -g pub-server\n```\n\nAt this point you can run `pub` from the command line in any directory, to preview your `.md` files.\n\n### Project-specific install\n\nInstead of depending on a global install, you can add pub-server to your project's package.json.\nThis provides more granular control over which version of pub-server is being used.\n\n```sh\nnpm install --save-dev pub-server\n```\n\nIf you want to deploy pub-server onto a PaaS like Heroku, use a regular dependency\ninstead of a devDependency.\n\n```sh\nnpm install --save pub-server\n```\n\n### Configuring scripts\n\nYou can also create script aliases for running pub with different options in your package.json E.g.\n\n```json\n\"scripts\": {\n  \"develop\":  \"pub\",\n  \"generate\": \"pub -O\",\n  \"static\":   \"pub -S out\"\n}\n```\n\nNow you can call `npm run develop` or `npm run generate` or `npm run static`.\n\nSee [](/command-line) for details.\n"},{"path":"/012 Simple doc site.md","text":"# Creating a simple doc site\n\nThe following recipe will work in any github project repo.\nIt assumes [pub-server](https://github.com/jldec/pub-server) installed globally.\nThis new site uses [pub-theme-doc](https://github.com/jldec/pub-theme-doc)\nand a flat list of pages. No configuration is required to get started.\n\n## Create a doc folder\n```sh\n    $ mkdir doc\n    $ cd doc\n\n    # create some .md files - english names ok - index.md is the root\n    # use a numeric prefix for extra control over the order\n    $ touch \"index.md\"\n    $ touch \"010 Introduction.md\"\n    $ touch \"020 Getting Started.md\"\n    $ touch \"030 Quickref.md\"\n\n    $ pub\n```\n\n## Preview the site structure\nBrowse to http://localhost:3001 and check the urls for each of the pages.\n![](/images/simple-gh-pages1.png)\n\n\n## Name the root page and edit your markdown\nTo specify a name for the root page, add a header and title to index.md.\nLeave a blank line after the header.\n```md\n    ---- / ----\n    name: Root page title\n\n    # Root page text\n```\n\nEdit content for each of the files. The other pages don't require extra\nheaders since they inherited their names from filenames.\n\n\n## `pub -O` to generate into ./out\n![](/images/simple-gh-pages2.png)\n\nThis folder can be transferred to a static hosting service like github pages.\nWebsite css and js files are included, and generated files have .html extensions.\n\n\n## `pub -S out` to preview the new static website in ./out\n![](/images/simple-gh-pages3.png)\n\n\n"},{"path":"/013 Configuration.md","text":"# Configuration with `pub-config`\n\nBy adding a `pub-config` file to a directory, you can control how pub-server processes files, rather than depending on defaults or command-line options. The `pub-config` for this documentation lives [here](https://github.com/jldec/pub-doc/blob/master/pub-config.js).\n\nA directory with a `pub-config` can also be packaged as a pub-server package or theme and distributed via npm, making it available for re-use in other projects.\n\n\n### options structure\n\n`pub-config` exports a single javascript options object. The main path options keys are listed below and each is documented on a separate page\n\n- `pkgs:` [Packages and Themes](/packages-and-themes)\n- `sources:` Paths to [Sources](/sources)\n- `outputs:` Paths to [Outputs](/outputs)\n- `staticPaths:` Paths to [Static Files](/static-files)\n- `browserScripts:` Generating [Browser Scripts](/browser-scripts)\n- `generatorPlugins:` [Generator Plugins](/generator-plugins)\n- `serverPlugins:` [Server Plugins](/server-plugins)\n\nBesides the main path options, the following core server and generator options are recognized.\n\n```js\nopts.production     // boolean (process.env.NODE_ENV === 'production')\nopts.port           // override port (process.env.PORT || '3001')\nopts.appUrl         // string - qualify URLs (process.env.APP)\nopts.linkNewWindow  // boolean - add target=\"_blank\" to external links\nopts.allowSpacesInLinks // boolean - allows markdown links with spaces (e.g. form input names with spaces)\n```\n\nAdditional options may be available depending on the active theme e.g for adding links to GitHub and copyright notices.\n\n### JSON or JavaScript\n\nYou have the choice of using either a .json or .js file for configuration.\n\nIf you use a .js file, export the options object using `module.exports`. The following example shows how to generate different config options using environment variables.\n\n```js\nvar opts = module.exports = {};\n\nopts.cloud       = process.env.CLOUD;\nopts.auth        = process.env.AUTH;\n\nopts.pkgs        = ['pub-pkg-seo'];\nif (opts.auth) { opts.pkgs.push('pub-pkg-google-oauth'); }\n\nopts.sources     = [...];\nopts.staticPaths = [...];\nopts.outputs     = opts.cloud ? null : [...];\n```\n\nThe syntax for .json is stricter, and it is not possible to include conditional logic, but json is easier to manipulate and re-serialize. No explicit `export` is required for json files.\n\n##### Canonical path options format\n\nPath options (all the keys above) can be either strings or objects and single-values or arrays. Objects are required if one path has additional properties. Arrays are required when there are multiple paths. The following are equivalent.\n\n```js\nsources: './markdown'\nsources: ['./markdown']\nsources: { path:'./markdown' }\nsources: [{ path:'./markdown' }]\n```\n\n### Inspecting the config\n\nTo inspect the fully resolved options while pub-server is running, browse to `/admin/opts`.\n\n`pub -C` will present a similar result on the command line.\n"},{"path":"/014 Packages and Themes.md","text":"# Packages and Themes\n\n`pub-server` may be extended with **packages**.\n\nPackages are [npm](https://www.npmjs.com/about) modules with their own `pub-config`.\n\n**Themes** are packages which include layout templates for building standalone websites. Most projects either include just one theme or they define their own layout. The theme for this documentation is [pub-theme-doc](https://github.com/jldec/pub-theme-doc).\n\n## Consuming packages\n\nPackages are consumed by pub-server projects, by including their names (or paths) in the `pkgs` key.\n\n```js\n  pkgs: [\n    'pub-theme-doc',\n    'pub-pkg-prism',\n    'pub-pkg-font-awesome',\n    'pub-pkg-seo'\n  ],\n```\n\nFor extra parameters, use `{ path:\"name\", ... }` instead of name strings like the example above.  \n\nTo use packages which are not included with `pub-server`, they first have to be installed.\n\n```\nnpm install --save <pkg-name>\n```\n\nThis will add a reference to the latest released version of the package into the `dependencies` list of your `package.json`.\n\n\n#### Resolving paths\n\nWhen you run `pub` from the command line, it looks for a `pub-config` file and invokes the [pub-resolve-opts](https://github.com/jldec/pub-resolve-opts) module.\n\nThis module resolves all paths relative to your project directory or, in the case of packages, relative to each package directory. It also merges the lists of paths from inside any included packages, making everything inside the package available to the parent project.\n\nThis mechanism allows pub-server packages to introduce their own `staticPaths`, `sources` etc. for re-use in your project.\n\n\n## package nesting\n\npub-server packages may not recursively contain other pub-server packages. Any nested inner packages listed in a package-level `pub-config` will be ignored when the top-level package is consumed.\n\nThis limitation is intentional, because current web standards like HTML and CSS are not recursively composable. For example, since all CSS classes share one namespace, the CSS classes inside a nested package will leak out into the global namespace.\n\nOf course pub-server packages may include (recursively) 3rd party npm modules as dependencies inside their own `package.json`.\n"},{"path":"/015 Sources.md","text":"# Sources\n\n`pub-server` uses content stored in sources to generate your site.\n\nMost sources are directories in your project or inside a theme package. Source directories are scanned, and new files picked up automatically when the source is read.\n\nFile-system sources can be watched and automatically re-read when changes are detected.\n\n## Source modules\n\nIn addition to the default file-system sources, pub-server supports pluggable npm modules which can read and write files from github, dropbox etc.\n\nThese are configured configuring `source.src` with the source module name E.g. 'pub-src-github'.\n\nThe source API is able to glob directories recursively, and return an ordered set of files, optionally matching a glob pattern.\n\nFor more information see [pub-src-fs](https://github.com/jldec/pub-src-fs) and\n[pub-src-github](https://github.com/jldec/pub-src-github)\n\n[pub-src-redis](https://github.com/jldec/pub-src-redis) can also serve as a cache for other sources.\n\nSource modules are resolved and loaded by pub-resolve-opts at startup time.\n\n## Markdown fragments\n\npub-server content is maintained in markdown fragments inside files which originate in sources.\n\nFragments in the same file are separated by a delimiter like\n\n    ---- /page-1 ----\n\nFor an overview of why we use fragments see the blog post [pub-server Fragments](https://blog.pubblz.com/pub-server-fragments).\n\n\n## Handlebars templates\n\nHandlebars templates are also just files (or fragments) in sources. For templates, pub-server looks an `.hbs` extension.\n\nTemplates are the key to separating HTML from content stored in markdown, making the content maintainable by non-developers.\n\npub-server compiles and invokes specific templates when it generates each page in a site. The templates use built-in [](/helpers) to call javascript functions for things like page-variable interpolation and markdown rendering. Custom helpers can be defined using [](generator-plugins).\n\n\n### Sample config\n\nThe sample below is used in a complex environment to run locally and on a Heroku server for staging. The hosted server uses a redis cache and pulls sources from GitHub.\n\n```js\nvar ifLocal = opts.localhost;\nvar ghTest  = process.env.TEST_GH;\n\nopts.sources = [\n\n  { name:           'markdown',\n    src:            (ifLocal && !ghTest) ? 'pub-src-fs' :    'pub-src-github',\n    path:           (ifLocal && !ghTest) ? '../<repo>/md'  : '/md',\n    repo:           '...',     // for pub-src-github\n    glob:           '**/*.md',\n    depth:          4,\n    cache:          (ifLocal ? null : 'pub-src-redis'),\n    leftDelim:      '----',\n    rightDelim:     '',\n    headerDelim:    '----',\n    slugify:        {allow:'_'},\n    writable:       true,\n    fragmentDelim:  true },\n\n  { name:           'templates',\n    path:           './templates',\n    compile:        'handlebars',\n    cache:          ifLocal ? null : 'pub-src-redis' },\n\n  { name:           'schedule',\n    path:           '...',\n    src:            'pub-src-http',\n    cache:          (ifLocal ? null : 'pub-src-redis'),\n    interval:       '20m',\n    timeout:        '10s',\n    type:           'JSON',\n    log:            true }\n];\n```\n\n#### notes:\n- `source.writable` is required for the editor to save files back to the source.\n- `source.name` enables use of `generator.sourcePage$[name]` in helpers.\n- `leftDelim`, `rightDelim`, `headerDelim` customizes fragment header syntax.\n- setting `source.compile` to 'handlebars'` forces all fragments to be treated as handlebars templates, irrespective of extensions.\n- setting `source.type` to something other than 'FILE' causes the source to be treated as an opaque JSON object instead of an array containing file objects.\n"},{"path":"/016 Outputs.md","text":"# Outputs\n\n`pub -O` generates a complete site including .html files generated from markdown, [](browser-scripts), and copies of [](static-files).\n\nThe output destination defaults to `./out`\n\nUsually `pub-config` will contain a single `outputs` configuration with the path and any other output-specific settings.\n\n```js\noutputs: {\n  path: './tgt',\n  relPaths: true,\n  fileMap: true,\n  outputAliases: true,\n  omitRoutes: ['/img'],\n  fqImages: { route:'/img', url:'https://techxlab.github.io' }\n  overrideOpts: {\n    appUrl: 'https://www.fmctraining.com',\n    production:true }\n},\n```\n\n`path` overrides the default output destination directory\n\n`relPaths` converts all internal URLs to relative paths. This is very helpful if you want to open the generated HTML files by opening them in a browser directly from the file system.\n\n`omitRoutes` can be use to omit directories which a not required in the output e.g. image directories hosted at a different CDN endpoint.\n\n`fqImages` specifies a route pattern for URLs which will be rewritten e.g. to point to a different host or CDN endpoint.\n\n`overrideOpts` used to specify output-specific opts e.g. to generate production HTML from a non-production environment.\n\n`fileMap` output a manifest of pages, statics, and scripts in `filemap.json`.\n\n`outputAliases` output html files and filemap entries for aliases using a template called 'redirect' (not automatically provided) - useful for redirects on some static hosts like GitHub Pages.\n"},{"path":"/017 Static Files.md","text":"# Static files\n\n### Serving static files with pub-server\n\nWhen pub-server is running it will serve static files according to `opts.staticPaths` in `pub-config`.\n\n```js\nopts.staticPaths = [\n{ path:   './img',\n  route:  '/images',\n  depth:  3,\n  glob:   '**/*.{jpg,gif,png}' },\n\n{ path:   './static',\n  glob:   '**/*.{css,js}' } ];\n\nopts.injectCss: [ '/css/stylesheet1.css', '/css/stylessheet2.css' ],\nopts.injectJs: [ '/js/library1.js', '/js/library2.js' ],\n```\n\nThis config will serve images located up to 3 levels under `./img` when browsers request urls starting with `/images/...`.\n\nThe config will also serve all `.js` and `.css` files located in '/static/js' and '/static/css', and explicitly inject 2 of each into the HTML using `opts.injectCss` and `opts.injectJs`.\n\nThe `.glob` [minimatch](https://github.com/isaacs/minimatch) pattern is used to test every file for matches.\n\nThe server ignores directories and files starting with `.` and `node_modules` unless they are explicitly served as single files (see below).\n\nStatic directories may exist inside [packages](/packages-and-themes) like the [default doc theme](https://github.com/jldec/pub-theme-doc) and [pub-pkg-editor](https://github.com/jldec/pub-pkg-editor). This explains how [jQuery](https://github.com/jldec/pub-pkg-jquery) and other files are made available when you run `pub` on the command line.\n\nHINT: To see which directories are being served, you can turn on console debug output just for statics by setting `DEBUG='pub:static'`. For a JSON list of all static files, query the server at `http://localhost:3001/admin/statics`.\n\nIf there is no `pub-config`,  pub-server will also serve static files from the first level of the current directory, or you can point to a directory containing static files with the command line `pub -s <dir>`. (note lower-case `s`)\n\n\n### Static directory scan\n\nUnlike [express](https://expressjs.com/) which reads the file system on each request, pub-server serves static files by scanning static paths on startup, and subsequently serving only those paths which were found in the scan. A watcher can be configured to trigger a re-scan of the path when new files arrive.\n\nThis allows pub-server to \"mount\" many static paths for all the included [packages](/packages-and-themes), and to serve single files (like favicons) mounted on root, without stat'ing the file system on each path for each request\n\nFor more details see [`server/serve-statics.js`](https://github.com/jldec/pub-server/blob/master/server/serve-statics.js).\n\n\n### Serving single files and injecting CSS or JS\nA `staticPaths` entry can point either to a directory or to a single file.\n\nThe following will include all files under `./static` as well as 2 `dot` files necessary for GitHub Pages.\n\n```js\nstaticPaths: [ './static', '.gitignore', '.nojekyll' ]\n```\n\nAdding `inject:true` on single file paths will inject a CSS `<link>` or JS `<script>` as in this example from [pub-theme-brief](https://github.com/jldec/pub-theme-brief).\n\nstaticPaths: [\n  {path:'./css/brief.css', route:'/css', inject:true },\n  {path:'./js/brief.js', route:'/js', inject:true }\n]\n\n### Publishing static files\n\n`pub -O` will copy static files from all `staticPaths` to the output destination when a website is generated.\n\nThis behavior uses the same configuration with `depth` and `glob` patterns to prevent unnecessary files from being copied.\n\n### Static-only mode\n\n`pub -S <dir>` runs `pub-server` in static-only mode, serving ONLY static files from any directory. It mimics the behavior of GitHub Pages, looking for index.html files in folders, and redirecting from /folder-name to /folder-name/\n\nThis is especially useful for testing static HTML containing relative links. E.g. if `./out` holds your generated site and you do `pub -S .` you can navigate to `http://localhost:3001/out/` to test the site as if it were hosted in a subdirectory on the server.\n\nSee [](links) for details about configuring pub-server to generate relative links.\n"},{"path":"/018 Browser Scripts.md","text":"# Browser Scripts\n\nIn addition to generating HTML from markdown, `pub-server` can bundle browser scripts using [browserify](https://github.com/substack/node-browserify).\n\nThis makes it easy to serve front-end scripts which `require()` npm modules just like node.js server-side code.\n\nBrowser scripts are served live, and also saved to output when a site is generated.\n\nNOTE: Scripts that do not include other modules or don't require any transformation, are easier to serve as [](static-files).\n"},{"path":"/019 Generator Plugins.md","text":"# Generator Plugins\n\nMany pub-server packages rely on generator plugins, usually to provide specialized handlebars helpers.\n\nGenerator plugins are \"universal\" npm modules. They run in node.js, as well as in browsers.\n\nHere is the `pub-config` entry from [pub-theme-doc](https://github.com/jldec/pub-theme-doc).\n\n```js\ngeneratorPlugins: './plugins/generator-plugin.js',\n```\n\nThe file path follows the node.js `require(path)` convention of using relative paths for modules which are local files and bare names for installable npm modules.\n\nHere is the [plugin](https://github.com/jldec/pub-theme-doc/blob/master/plugins/generator-plugin.js):\n\n```js\nmodule.exports = function(generator) {\n\n  var u = generator.util;\n  var opts = generator.opts;\n  var hb = generator.handlebars;\n\n  hb.registerHelper('navIcon', function(frame) {\n\n    return hb.defaultFragmentHtml('/#navicon',\n      '_!bars fw lg_',\n      '<span class=\"icon\">=</span>',\n      frame);\n  });\n\n  hb.registerHelper('docTitle', function(frame) {\n    var title = opts.docTitle || opts.pkgName || 'pub-server';\n    var subTitle = opts.docSubTitle || '';\n\n    return hb.defaultFragmentHtml('/#doctitle',\n      '# [' + title + '](/)\\n' + subTitle,\n      '<h1><a href=\"/\">' + u.escape(title) + '</a></h1>' + subTitle,\n      frame);\n  });\n\n  hb.registerHelper('topMenu', function(frame) {\n    var url = opts.github || hb.githubUrl();\n\n    return hb.defaultFragmentHtml('/#topmenu',\n      url ? '- [_!github lg fw_](' + url + ' \"github\")' : '',\n      url ? '<ul><li><a href=\"' + url + '\">github</a></li></ul>' : '',\n      frame);\n  });\n\n}\n```\n\nGenerator plugins are expected to export a single function which is called once at startup. The function is passed a single `generator` parameter which is an instance of `pub-generator`.\n\n### Registering helpers\n\nPlugins can register new helpers using the handlebars instance at `generator.handlebars`.\n\nAn interesting example is the generator plugin in [pub-pkg-font-awesome](https://github.com/jldec/pub-pkg-font-awesome) which, besides registering some helpers, also adds a plugin to `generator.marked` to extend the markdown syntax for emphasis/italics.\n\n### Manipulating the generator page model\n\nPlugins which need to manipulate the page content model after it has been loaded from source, can do so by hooking into a 'pages-ready' event emitted by the generator after loading source files and parsing all the markdown and templates\n\n```js\ngenerator.on('pages-ready', function() {\n    decoratePages();\n  });\n```\n\nNote that the `pages-ready` event will be triggered each time the server reloads sources e.g. when watching directories for changes.\n"},{"path":"/020 Server Plugins.md","text":"# Server Plugins\n\nServer Plugins are npm modules which extend pub-server's built-in [web server](web-server-configuration). A working example is [pub-pkg-google-oauth](https://github.com/jldec/pub-pkg-google-oauth).\n\nServer plugins export a single function which receives an instance of the pubServer object. This function is called once at startup, providing a hook for the plugin to add routes etc.\n\nFor additional control over the sequencing of when routes are added, the server emits `init-app-first` before mounting pages, statics, and browser scripts and it emits `init-app-last` after those are mounted.\n\nServer plugins are configured in pub-config\n\n```js\nopts.serverPlugins = [ './my-server-plugin' ];\n```\n\n## The pubServer object\n\n```js\n{\n  opts:          // global opts object (including opts.log)\n  app:           // express app\n  generator:     // pub-generator\n}\n```\n\n`pubServer` is an eventEmitter.\n"},{"path":"/021 Web Server Configuration.md","text":"# Web Server Configuration\n\n`pub-server` can be deployed as a node.js Web server with built-in support for:\n\n- Error handling and redirects\n- Cookie sessions\n- User request logging to session memory or redis\n- System event logging to redis\n- Access control lists and plugin-support for OAuth\n- Static and generated files\n- File-system watchers\n- Websockets\n\nThe server is based on [express](https://expressjs.com/).\n\n## Error handling\n\n`pub-server` mounts a 404 'not-found' and a 500 'server-error' handler.\n\nThe 404 logic will be triggered if no pages, staticPaths, or browserScripts match the requested path. It returns an empty 404 status for requests with a non-html extension.\n\nNot-found requests for paths with no extension, or with an html extension will be 302 redirected to the home page or the first page found, unless there is an explicit /404 page in the content. This results in a much better experience for `pub` when it is used to render say a directory containing just a single README.md\n\nServer errors will result in a simple empty 500 status response unless there is an explicit /500 page in the content.\n\n## Sessions\n\nSessions are automatically enabled. Please refer to  [express-session](https://github.com/expressjs/session) for configuration details.\n\nSession options may be maintained in `opts.session` in `pub-config`. For details of available options see [express-session](https://github.com/expressjs/session#options). Default values are listed below; a value for `session.secret` (or `process.env.SSC`) is required when sessions are persisted in redis.\n\n```js\nopts.session =\n  { name: 'pss',\n    resave: false,\n    saveUninitialized: true,\n    rolling: true,\n    secret: process.env.SSC || (!resisOpts && u.str(Math.random()).slice(2)),\n    cookie: { secure:opts.production, maxAge:60*60*1000 } }\n```\n\nSession storage with with redis is enabled by setting `opts.redis` in `pub-config` and, if necessary, configuring the redis credentials via environment variables. See [node-redis](https://github.com/NodeRedis/node-redis#options-object-properties) for configuration options.\n\n```js\nopts.redis =\n{ prefix: 'pub-test-auth:', // prefix all keys (sessions and logs)\n  _sess:  'session:',       // capture sessions using keys <prefix><_sess><sid>\n  _log:   'log:' };         // capture system logs using list key <prefix><_log> (see below)\n```\n\nTo configure redis using environment variables:\n\n```sh\nexport RCH=localhost # host: default = localhost, can also be configured via opts.redis.host\nexport RCP=6379      # port: default = 6379, can also be configured via opts.redis.port\nexport RCA=xxx       # auth_pass: default blank, can only be configured via environment\n```\n\n## System logs\n\nModules in pub-server call a global 'opts.log(...)' provided by [logger-emitter](https://github.com/jldec/logger-emitter) to show warnings and errors on the console.\n\nIf you set `opts.redis._log = <key-name>`, the same events will be timestamped and logged into a [redis list](https://redis.io/topics/data-types-intro).\n\n## Session logs\n\npub-server can record clicks and other events generated in the browser via the `/server/log/<path>?<params>` api.\n\nHTTP requests sent to this endpoint will stored as objects containing the request path and parameters in the `session.log` and, if redis is enabled, automatically persisted with the session. E.g.\n\n```js\nfetch('/server/log' + location.pathname + (location.search || ''), { method:'POST'});\n```\n\nThe default `/server/log` route can be configured by setting 'opts.session.logRequestPath'.\n\n## Configuring session-based access control\n\nAccess control is configured on the server using environment variables `ACL_READ`, `ACL_EDIT`, `ACL_ADMIN`. These restrict read access to all pages (except those with `access:everyone`), edit access, and admin access respectively. Editors can also read, and admins can edit and read.\n\nEach of the 3 ACLs contains a comma-separated list of user ids (typically email addresses). These are matched with the `session.user` at run time, which is established by an authentication plugin such as [pub-pkg-google-oauth](https://github.com/jldec/pub-pkg-google-oauth).\n\nE.g. To grant yourself admin rights, and 3 other users read access:\n\n```sh\nexport ACL_ADMIN={your-email}\nexport ACL_READ={email-1},{email-2},{email-3}\n```\n"},{"path":"/025 The Page Model.md","text":"# The Page Model\n\nAs mentioned in [](/how-it-works), markdown fragments in source files are parsed into javascript page and fragment objects when the generator is loaded.\n\nThe representation in memory is very simple.\n\n`generator.pages` is a flat array of all `page` objects in source order.\n\nEach `page` object has:\n\n    _txt:       the unparsed page body text (usually markdown)\n    _hdr:       the unparsed page header\n    _fragments: a flat array of page fragments for rendering in order\n    _href:      the url path for the page\n    _file:      a reference to a source file object for saving edits\n    _parent:    the parent page in the page url hierarchy\n    _children:  an array of child pages in the page url hierarchy\n    _next:      the next sibling page in the url hierarchy\n    _prev:      the previous sibling page in the url hierarchy\n    #*:         #named fragments for rendering fragments by name\n    *:          named values parsed from the page header\n\nThis basic structure, which is derived from a very simple text file format, is sufficient to represent complex pages with lots of fragments, as well as complex hierarchical sites with lots of pages.\n\nAnd, by breaking pages into fragments, standard markdown can be used inside fragments, without requiring additional markdown extensions to represent arbitrary layout elements like columns and sections.\n\n[](/generator-plugins) for themes or custom sites may manipulate page objects, creating additional properties for alternative content hierarchies or to classify various types of pages.\n\nPlugins can also use the page structure to generate menus, sitemaps, and other navigation.\n"},{"path":"/027 Links.md","text":"# Links\n\nFor content maintained in markdown, it is important not to have to worry about where that content is going to be hosted, or even which level of the site the content will live on, relative to other pages on the site.\n\nFor this reason all links inside the markdown should use a simple \"rooted path\" convention both for specifying the urls of pages, and for referencing other pages via links inside the markdown. Rooted paths start with '/' for the index page, and continue in a typical hierarchy below that. E.g.\n\n```\n/products/vendor-name/product-name\n```\n\n## Generating static HTML with links\n\nGenerating links for static HTML pages can be challenging, especially if the site is being hosted in a subdirectory on the server or if image links need to be rewritten to use a separate CDN endpoint.\n\nE.g Content inside page1 may refer to page2 using a path like `/path/to/page2` but this will break if the running site lives at a url like `https://me.github.io/website-root/`\n\nThere are two approaches to solving this - both are automatable but ugly.\n\n1. auto-prefix links with a root path like `/website-root/path/to/page2`\n2. auto-prefix links with relative paths like '../../path/to/page2'\n\nThe current version of pub-server supports the 2nd approach to auto-prefix links originating in markdown with the correct relative paths. In `pub-config` this is configured per-output as follows:\n\n```js\noutputs: {\n  path: './out',   // configure output directory\n  relPaths: true   // auto-prefix links with relative paths\n}\n```\n\nE.g if a markdown page `/posts/year/month/day.html` includes an image at `/static/images/me.jpg`, the generated img src will point to `../../../static/images/me.jpg`.\n\nOne benefit of using this approach is that the resulting tree of static html files can be hosted at any level. No prior knowledge of the destination directory name is required when the site is generated. This can be helpful for testing or cloning sites.\n\n\n## Links to directories and trailing /\n\nUnlike a file system, it is quite normal to have pages on a website with URLs which look like links to directories in the URL hierarchy. E.g. `/products/vendor-name/` may return a page about the vendor, and then each child page in the hierarchy could be a product from that vendor.\n\nThis raises the question of whether or not to include the trailing `/` in the URL at the directory level, and what to return when users browse to a URL without the `/`.\n\n> Github Pages will automatically 301-redirect from the URL without the trailing '/' to the URL with the trailing '/' if there is a directory with that name, and it has an index.html file.\n\nThis means that if you are targeting Github Pages and you have directories in your site hierarchy, use the trailing '/' for naming those pages and for links pointing to those pages to avoid sending users to pages with redirects.\n\nPages which are NOT directories generally don't have a trailing '/'.\n\nIf you prefer you can even omit the trailing '/' on URLs which are directories. When pub-server generates static HTML output files, it will automatically figure out when to generate directories containing an index.html file, and when it can simply use a file called `<directory-name>.html` for the page.\n\n_NOTE: Using the trailing '/' also affects the way browsers interpret relative links, since they effectively add another level to the hierarchy. E.g. a link like './pagename' will mean something different if it occurs inside the HTML of a page at '/directory' vs. a page at '/directory/'.  When pub-server is generating output with `relPaths`, it will figure out the right level for either case._\n\n## Links in templates\n\nTemplates may include links to CSS stylesheets etc. For these to receive the same treatment as links in markdown the `{{relPath}}` helper should be used in front of the link e.g.\n\n```html\n<link rel=\"icon\" href=\"{{relPath}}/img/favicon.ico\" type=\"image/x-icon\">\n```\n\nIf the output has been configured with `relPaths:true`, this `{{relPath}}` helper will insert a './' or the correct number of levels of `../../` etc.\n\n## Publishing with links to files/images on another server\n\nA site may have links to assets in the local filesystem during development, but those links are then converted to fully qualified links on a different server when the site is published.\n\nThis may be configured using output configuration settings as follows.\n\n```js\noutputs: {\n  path: './out',\n  relPaths: true,\n\n  // don't copy assets under /assets to /out\n  omitRoutes: ['/assets'],\n\n  // prefix /assets... with the specified url\n  fqImages: { route:'/assets', url:'https://assets.example.com' }\n}\n```\n\nThese settings will auto-prefix any markdown links matching `fqImages.route` with the specified `fqImages.url` during conversion from markdown to HTML.\n\nThe same is made possible for links inside templates by wrapping the hardwired local paths with a `{{fixPath <path>}}` helper.\n\nE.g.\n\n```html\n<a href=\"{{fixPath '/assets/document-abc.pdf'}}\">Download</a>\n```\n"},{"path":"/030 Command line.md","text":"# Command Line Options\n\n#### Usage: `pub [options] [dir]`\nSpecifying dir will direct pub to a different working directory.\n\n##### `-h, --help`\nOutput usage information on the command line.\n\n##### `-A, --no-open`\nDisable auto-open in browser (mac only).\n\n##### `-p, --port {port}`\nOverride the default server port [3001].\n\n##### `-t, --theme {name}`\nOverride the default theme with different module-name or dir, repeatable.\n\n##### `-o, --output-path {dir}`\nOverride the default output directory [.].\n\n##### `-O, --output-only`\nGenerate a set of output html together with static files into the output directory, and exit.\n\n##### `-G, --html-only`\nOutput only generated html files and exit.\n\n##### `-r, --root <prefix>`\nPrefix urls with a static root, \".\" means path relative.\n\n##### `-s, --static {dir}`\nOverride default static directory [.].\nAlso supports {dir},{route}.  E.g. `pub -s ./static/img,./images`.\n\n##### `-S, --static-only {dir}`\nServe only static files from {dir}. May use output options from pub-config.\n\n##### `-C, --config`\nShow the current configuration on the command line and exit.\n\n##### `-I, --ignore-config`\nIgnore the pub-config file in the current directory. This is useful when previewing a README in a directory which is being used for a site or theme with a pub-config.\n\n##### `-P, --pages`\nShow a list of pages and templates on the command line and exit.\n\n##### `-w, --watch-pkgs`\nAlso watch inside packages, useful during package development.\n\n##### `-W, --no-watch`\nDisable the watcher, E.g. to prevent watching network directories.\n\n##### `-K, --no-sockets`\nDisable websockets, E.g. to reduce noise while debugging.\n\n##### `-E, --no-editor`\nServe the rendered HTML only, no built-in editor.\n\n##### `-m, --minify`\nMinify browser scripts to reduce their download size (implicit with -O)\n\n##### `-d, --dbg`\nServe scriptmaps with browser scripts, and send DEBUG to the client-side.\n\n##### `-D, --debug`\nStart node with --debug for server-side debugging (also implies -d)\n\n##### `-B, --debug-brk`\nStart node with --debug-brk (also implies -d)\n"},{"path":"/040 Helpers.md","text":"# Helpers\nThe following handlebar helpers are included in\n[pub-generator/helpers.js](https://github.com/jldec/pub-generator/blob/master/helpers.js)\n\nHTML helpers should be enclosed in `{{{triple-braces}}}` to avoid html escaping.\n\n\n## Markdown HTML\n\n##### `{{{html <text>}}}`\nReturns html for the markdown text or in the current page or fragment.\n\n##### `{{{fragmentHtml <fragment>}}}`\nReturns html for a named/referenced fragment.\n\n##### `{{{html-noWrap}}}`\nReturns html without the wrapper div - useful to prevent editing or for container-sensitive CSS\n\n##### `{{{html-fq}}}`\nReturns html with fully qualified images and links - useful for HTML exports.\n\n\n## Layout helpers\n\n##### `{{{renderPage}}}`\nRenders the current page using the template specified in its markdown header (or `default`).\n\n##### `{{{renderLayout}}}`\nRenders the current page using its layout template - only used with 3-level template nesting.\n\n##### `{{{injectCss}}}`\nInjects CSS `<link>` elements for all themes and packages.\n\n##### `{{{injectJs}}}`\nInjects `<script>` elements for all themes and packages, as well as for editor and websockets when necessary.\n\n##### `{{partial <template>}}`\nRenders the specified template using the same page context as the current page - useful for composing templates\n\n\n\n## Iterators\nThese are block helpers for repeated template blocks - usage: `{{#helper}}...{{/helper}}`\n\n##### `{{#eachFragment <prefix>}}`\nIterates over page fragments starting with prefix. Prefix may be qualified with page url to reference the same fragment from layout templates which are shared across pages.\n\n##### `{{#eachPage}}`\nIterates over all pages\n\n##### `{{#eachPageWithTemplate <template>}}`\nIterates over all pages in the site with a specific template\n\n\n\n## Conditional helpers\nThese are block helpers which run the template block once if the condition is met.\nAn {{else}} block may follow the first conditional block. E.g. `{{#ifHelper}}...{{else}}...{{/ifHelper}}`\n\n##### `{{#ifeq <value1> <value2>}}`\nTests for value1 == value2.\n\n##### `{{#ifnoteq <value1> <value2>}}`\nTests for value1 != value2.\n\n##### `{{#ifOption <key>}}`\nTests for truthy opts.key.\n\n##### `{{#ifDev}}`\nTests for !opts.production.\n\n\n\n## Links and images\nBecuase urls in links and images may be qualified differently depending on the hosting target or CDN,\nit makes sense to wrap these in a helper, e.g. to make the image server configurable separately or to\nenable hosting both with and without relative paths.\n\n##### `{{relPath}}`\nReturns relative path prefix for the current page or output file when output.relPaths is true (affects only static output HTML). Useful for qualifying hardwired CSS and JS links in layout templates.\n\n##### `{{fixPath <href>}}`\nLike {{relPath}} but also handles link rewriting on output with fqImages. Requires href string parameter.\n\n##### `{{{linkTo <url> <text>}}}`\nReturns link html for the specified url/text - useful when a url is maintained in page metadata.\n\n##### `{{{pageLink}}}`\nReturns link html for the current page or fragment - useful for auto-generating lists of links with block helpers.\n\n##### `{{pageHref}}`\nReturns just the (qualified or not) href for the current page or fragment - useful for constructing customized links.\n\n##### `{{fqurl}}`\nReturns the fully qualified url for the current page or fragment - useful for sitemaps.\n\n##### `{{{next}}}`\nReturns link to the next page at the same level in the URL hierarchy.\n\n##### `{{{prev}}}`\nReturns link to the previous page at the same level in the URL hierarchy.\n\n##### `{{{image <src> <text> <title>}}}`\nReturns properly qualified `<img src=\"src\" alt=\"text\" title=\"title\">`. If no parameters are passed, this helper\nwill try to use `this.image` or `this.icon`. Text and title are optional.\n\n## Page lists\n\n#### `{{{pageTree <groupBy>, <defaultGroup>}}}`\nRender nested ul-li structure starting at `/`, grouping by <groupBy>. Use <defaultGroup> if <groupBy> has no value. (groupBy and defaultGroup must either both be specified or no args passed). NOTE: result does not include root\n\n## Simple string and number helpers\n\n##### `{{title}}`\nReturns current page name or title\n\n##### `{{option <key>}}`\nReturns opts.key\n\n##### `{{fragmentID}}`\nReturns current fragment id (without the leading `#`)\n\n##### `{{mod}}`\nReturns frame.data.index % n || 0 inside eachPage or eachFragment e.g. for generating style names.\n\n\n\n## Escaping\n\n##### `{{uqt <string>}}`\nReturns url-escaped string\n\n##### `{{{hbr <string>}}}`\nReturns HTML-escaped string with HTMLified linebreaks\n\n##### `{{csv <array or string>}}`\nReturns string of comma separated values -- useful for summarizing form data from checkboxes\n\n##### `{{csvqt <string>}}`\nReturns string escaped for csv output (fixes commas and quotes)\n\n\n\n## Date helpers\nThe following helpers use [date-plus](https://github.com/jldec/date-plus) to parse and format the input\nIf no input is provided the current date/time is used.\n\n##### `{{dateTime <date>}}`\nReturns date.format()\n\n##### `{{shortDate <date>}}`\nReturns date.format('m/d/yyyy')\n\n##### `{{mediumDate <date>}}`\nReturns date.format('mediumDate')\n\n##### `{{longDate <date>}}`\nReturns date.format('longDate')\n\n##### `{{fullDate <date>}}`\nReturns date.format('fullDate')\n\n##### `{{xmlDateTime <date>}}`\nReturns date.format('yyyy-mm-dd\\'T\\'HH:MM:ss')\n\n##### `{{isoDateTime <date>}}`\nReturns date.format('isoDateTime')\n\n\n\n## Helper utility functions\nThe following functions are useful for writing additional helpers in a plugin.\n\n##### `hb.relPath()`\nFunction form of {{relPath}}\n\n##### `hb.fixPath(href)`\nFunction form of {{fixPath}}\n\n##### `hb.hbp(<param>)`\nDetects whether a parameter was passed to the helper and returns undefined if not.\nUseful for variadic helpers E.g.\n\n```js\nhb.registerHelper('date', function(d, frame) {\n  return u.date(hbp(d)).format('d mmmm, yyyy');\n});\n```\n\nWhen `{{date}}` is used without additional parameters, handlebars will pass the frame\ncontext to the helper function as the first parameter. Using hbp() detects this.\n\n`hb` is a reference to generator.handlebars.\n"},{"path":"/050 GitHub Pages.md","text":"# GitHub Pages\n\nThere are many ways to setup your repos for publishing on GitHub Pages. This discussion assumes that you are publishing on GitHub Pages by pushing a \"Project\" repo with a `gh-pages` branch as described [here](https://help.github.com/articles/user-organization-and-project-pages/).\n\n## Recommended approach: _separate repo_\n\nMost docs assume that you want to maintain your gh-pages with your source in one repo.\n\nHowever, things get a lot simpler if you separate the repo which holds the source used to generate your site, from the \"gh-pages\" repo used to publish it on GitHub Pages.\n\n- no switching branches and merging trees\n- no empty gh-pages orphan branch to intialize\n- no static content cluttering up your source repo\n- and allow for sites generated from multiple source projects\n\n## Publishing a new site to gh-pages\n\nThe following steps assume that you will use an `out` subdirectory in the root of the source project. Alternative paths can be configured using the `outputs` key in your pub-config.\n\nTo prevent the output files from being picked up as part of the source repo, add `/out/` to your `.gitignore` file.\n\nThe first time you run `pub -O` it will create an `out` directory for your html output and other assets.\n\nTest the output by running `pub -S .` and then navigating to [http://localhost:3001/out/](http://localhost:3001/out/).\n\nThe `-S <path>` option runs pub-server as a static-only web server, emulating GitHub Pages. If you don't use a custom domain, this will also test the relative links in your html since your site on GitHub Pages will live under `https://<id>.github.io/<repo>/...`.\n\nIf [links](/links) are broken, make sure that your pub-config has an output with `relPaths` set. e.g\n\n```js\noutputs: {\n  path: './out',\n  relPaths: true\n},\n```\n\nAt this point it may also be useful to run `git status` in the root of your main project to make sure that the `out` directory is properly ignored. If not, add '/out/' to your `.gitignore` file.\n\nWhen you are ready to publish a new GitHub Pages repo:\n\n```bash\ncd out\ngit init\ngit add -A\ngit commit -m 'first pub-server output'\ngit branch -m gh-pages\n```\n\nThe last step above just renames the default \"master\" branch to \"gh-pages\".\n\nFollow the normal process to create a new repo on Gitub and use the suggested commands for intializing that with an existing repo, _except_ when you `git push -u` the first time, replace \"master\" with \"gh-pages\".\n\n```bash\ngit remote add origin https://github.com/<id>/<repo>.git\ngit push -u origin gh-pages\n```\n\n## Publishing updates\n\nUpdating the site on GitHub Pages requires no fancy git magic. Simply re-generate the output into the `out` directory using `pub -O` and then commit and push the changes to GitHub.\n"}]},{"path":"/Users/jleschner/pub/doc/node_modules/pub-theme-doc/templates","_pkg":"pub-theme-doc","name":"templates","type":"FILE","watch":false,"files":[{"path":"/default.hbs","text":"{{{html}}}\n{{#each _fragments~}}\n{{{html}}}\n{{/each}}\n"},{"path":"/doc-layout.hbs","text":"<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n{{{metaSeo}}}\n\n<!-- html generated by pub-server from markdown {{_file.path}} -->\n\n<title>{{title}}</title>\n{{{injectCss}}}\n<!--[if lt IE 9]>\n<script src=\"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\"></script>\n<script src=\"https://oss.maxcdn.com/respond/1.4.2/respond.min.js\"></script>\n<![endif]-->\n</head>\n<body>\n\n{{{renderLayout}}}\n\n{{{injectJs}}}\n{{{comment \"copyright\"}}}\n</body>\n</html>\n"},{"path":"/main-layout.hbs","text":"<header>\n<div id=\"doctitle\">{{{docTitle}}}</div>\n<div id=\"topmenu\">{{{topMenu}}}</div>\n</header>\n\n<div id=\"navicon\" onclick=\"\">{{{navIcon}}}\n<nav id=\"toc\">\n<ul>\n{{#eachPage~}}\n<li>{{{pageLink}}}</li>\n{{/eachPage~}}\n</ul>\n</nav>\n</div>\n\n<div id=\"main\" onclick=\"\">\n<div id=\"content\" class=\"markdown-body\">\n{{{renderPage}}}\n</div>\n<div id=\"credit\">{{{credit}}}</div>\n</div>\n"}]},{"path":"/Users/jleschner/pub/doc/node_modules/pub-pkg-seo/src","fragmentDelim":1,"_pkg":"pub-pkg-seo","name":"src","type":"FILE","watch":false,"files":[{"path":"/pages","text":"---- /robots.txt ----\nnocrawl:1\nnolayout:1\ntemplate:robots.txt\naccess:everyone\n\n---- /sitemap.xml ----\nnocrawl:1\nnolayout:1\ntemplate:sitemap.xml\naccess:everyone\n"},{"path":"/robots.txt.hbs","text":"user-agent: *\n{{#ifOption 'noRobots'}}\ndisallow: /\n{{else}}\nallow: /\n{{/ifOption}}\n"},{"path":"/sitemap.xml.hbs","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n{{#eachPage~}}\n<url><loc>{{fqurl}}</loc></url>\n{{/eachPage}}\n</urlset>\n"}]},{"path":"/Users/jleschner/pub/doc/node_modules/pub-pkg-editor/src","writable":true,"_pkg":"pub-pkg-editor","name":"_src","type":"FILE","tmp":"/Users/jleschner/.tmp/_src","watch":false,"fragmentDelim":true,"files":[{"path":"/pub-editor-doclayout.hbs","text":"<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>pub {{name}}</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<link rel=\"stylesheet\" href=\"{{relPath}}/pub/css/editor.css\">\n</head>\n<body>\n{{{renderPage}}}\n<script src=\"{{relPath}}/js/jquery-1.12.4.min.js\"></script>\n</body>\n</html>\n"},{"path":"/pub-editor-help.md","text":"---- /pub-editor-help ----\nname: pub Editor\ndoclayout: pub-editor-doclayout\nnopublish: 1\n\n\n## Editing pages with pub server\n\n- **try it out!**  -- you can [edit this page](/pub/editor-help).\n\n- Click on the (E) button (ony visible for Editors) at the top right on the staging server, to open any page for editing in Composer.\n\n- Once open, the (E) changes to an (C) which closes the Composer and returns to normal staging website navigation.\n\n- In composer mode, there are two panes.  \n  The markdown editor on the left  \n  And the preview pane on the right\n\n- You can drag the little round dragger at top of the line separating the panes left and right. Your settings will be remembered across sessions.\n\n- The preview pane can be used to navigate the website, select other pages for editing, and display, in real-time, any changes you make in the editor on the left.\n\n- The website in the preview pane should look and behave just like the normal (staging) website. Click on links to navigate, and even use your browser's back button. The only exceptions are pages which require information from the server e.g. the thank-you pages after submitting a registration or an info request.\n\n- The composer can also be opened by prepending `pub/` to the beginning of the path in the url. E.g. to open this page in composer, go to [/pub/editor-help](/pub/editor-help)\n\n- sometimes if the network is slow, the composer won't work the first time -- navigating to another page by clicking somewhere in the preview should fix it.\n\n## Modifying pages\n\n- click on the editor button (E) at the top right, and wait a second or two for the markdown to appear in the left pane.\n\n- the header section at the top of the markdown in the left pane contains \"meta\" information like (most importantly) the `page:` which is the url path to the page, and the `template:` which defines the type of page.\n\n- below the header section is the \"main\" markdown content for the page.\n\n- edit away..., You should see your changes immediately reflected in the preview pane on the right.\n\n- All changes are saved automatically to the server (no need to click on any save button) but nothing is published to the www website. \n\n- Click on the close button (C) at the top right, to close the composer, and see the change on the staging site.\n\n## Committing changes\n\n- At any time you can click on the â (check symbol) at the top of the left pane.\n\n- you should see a list of all the updated pages or fragments which have not yet been committed.\n\n- Hovering over any one of the updates in the list should show you a bit of what changed (in case you forgot).\n\n- Clicking on one of the updates in the list will present a confirmation prompt. Click on OK to commit or Cancel to go back without comitting.\n\n- Once you commit, it will take a few minutes for the main www server to refresh its pages with those changes (right now the interval is set to 5 min).\n\n## Modifying fragments\n\n- Content like the banner ads, and the bio's on the location pages and the staff page, lives in \"fragments\". These have a `fragment:#fragment-name` header instead of a `page:path` header.\n\n- to edit this, navigate to the page, then click on the **â** fragment selection pointer (little hand) at the top right and then click anywhere inside the fragment that you want to edit in the preview pane on the right. The markdown for the selected fragment should appear on the left.\n\n## Adding or removing pages\n\n- Contact your web admin for help adding new pages, or changing page urls.\n\n## Uploading images\n\n- For best results, images should be sized at 2x the desired pixel width and height and then given explicit width and height dimensions (1/2 of the actual) when inserted. See [composer markdown extensions](#composer-markdown-extensions)  below for more details\n\n- To upload an image, click on the â° button at the top left. This will open a little uploader form which you can browse your file system for the image that you want to upload (drag and drop not supported yet sorry). After uploading you should see the image below the form together with a markdown snippet for the image, and the image URL.\n\n- The uploader will rename the image file with just lowercase and hyphens, but please use meaningful file names for your images before uploading them, so that someone looking at all the image files, can recognize what it is.\n\n- Usually you will copy the markdown snippet and paste it somewhere into the markdown editor. Note that inside markdown, you don't need the fully qualified image source url, just start the image url or link with `/images/...`\n\n# Markdown\n\nEditor supports [github flavored markdown](https://help.github.com/articles/github-flavored-markdown/).\n\n### Paragraphs and line breaks\nSimply leave a blank line between paragraphs. To force a line break put 2 spaces at the end.  \nlike so.  \ndone.\n\n### links and images\n\nIn general links have the form `[text](url \"title\")`\n\nLinks within the website don't require any [text] if the page has a name e.g. `[](/contact-fmc)` will become [](/contact-fmc).\n\nAlso, if the url starts with http:// or https:// and you want to show the url in the resulting page, you can just include it inline in the text without wrapping it in `[]()`\n\nMarkdown for images looks just like markdown for links with a `!` in front  \nE.g. `![jurgen's kids a few years ago](/images/gmail-logo-1.gif)`  \n![jurgen's kids a few years ago](/images/gmail-logo-1.gif)\n\nIf you want an image which links to another page, you put the image markdown inside the text part of the link markdown like this.  \n`[![Image](image-src)](link-url)`\n\n### Editor markdown extensions\nMost of these extensions work by recognising patterns in the `[]( \"title\")` part of the link markdown i.e the part in `\"\"` after the url.\n\n- Use `^` to force a link to open in a new window E.g. `[](/help \"^\")` [](/help \"^\")\n\n- Note: \"Fully qualified\" links (which include `https://servername/...`) automatically open in a new tab/window. E.g.  \n`[google](https://www.google.com)` opens a new window on\n[google](https://www.google.com)\n\n- The link title part of the image markdown can be used for `WxH` sizing or `name=value` attributes. E.g.  \n`\"align=right\"` ![](/images/gmail-logo-1.gif \"align=right\")  \n`\"width=32\"` ![](/images/gmail-logo-1.gif \"width=32\")  \n`\"12x12\" `![](/images/gmail-logo-1.gif \"12x12\")\n\n### Markdown inline formatting\n- **BOLD**\n- *ITALIC*\n- ***BOLD AND ITALIC***\n- ~~STRIKE-THRU~~\n- `quoted-text with <> tags`\n\n\n    quoted\n    paragraph\n    spanning multiple lines\n\n\n# h1 level heading\n## h2 level heading\n### h3 level heading\n#### h4 level heading\n\n### lists\n\n- bullet list\n- bullet list\n  - sub-bullet\n  - sub-bullet\n    - sub-sub-bullet\n    - sub-sub-bullet\n\n\n1. numbered list\n   1. sub-point\n   2. sub-point\n    3. sub-sub-point\n2. numbered list\n3. numbered list\n\n* * * \nUse `* * *` on a separate line for horizontal rules \n\n---\n\n### tables\n\nGFM tables use `|` to separate columns\n\n    | Left-Aligned  | Center Aligned  | Right Aligned |\n    | :------------ |:---------------:| -----:|\n    | col 3 is      | some wordy text | $1600 |\n    | col 2 is      | centered        |   $12 |\n    | zebra stripes | are neat        |    $1 |\n\nbecomes...\n\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n\n...\n---\n\nHere's a [Markdown cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) with more information about things like tables.\n\nAnd here's some [more background](/help/markdown-motivation) on the motivations behind markdown\n\n![](/images/2016-05-07-13.43.19.jpg \"width=100\")\n"},{"path":"/pub-editor-updates.hbs","text":"<div class=\"editorupdates\">\n<h3>{{name}}</h3>\n<ul class=\"difflist\">\n{{#each diffs}}\n<li title=\"Click to open in editor.{{difftext}}\" data-file=\"{{file}}\" data-href=\"{{diffpage}}\" class=\"difflistitem\">\n  <span class=\"diffrevert\" title=\"Click to revert changes (will trigger editor reload.)\">ð</span>\n  <span class=\"diffcommit\" title=\"Click to commit and publish changes.\">âï¸</span>\n  {{difffragments}}\n</li>\n{{/each}}\n</ul>\n</div>\n"},{"path":"/pub-editor-upload.hbs","text":"<div class=\"upload\">\n<h3>{{name}}</h3>\n<form method=\"POST\" enctype=\"multipart/form-data\" action=\"/admin/pub-editor-upload\">\n{{{html}}}\n</form>\n{{#eachUpload}}<pre>![](/images/{{{name}}}){{s3Err}}\n</pre>\n<img src=\"{{opts 'fqImages'}}/images/{{name}}\"><br>\n{{opts 'fqImages'}}/images/{{name}}\n{{/eachUpload}}\n</div>\n"},{"path":"/pub-editor.hbs","text":"<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>pub editor</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<link rel=\"stylesheet\" href=\"{{relPath}}/pub/css/editor.css\">\n<link rel=\"stylesheet\" href=\"{{relPath}}/pub/humane-js/flatty.css\">\n</head>\n<body>\n<div class=\"handle leftright\"></div>\n\n<div class=\"outer col\">\n\n<div class=\"header row\">\n  <div class=\"menubutton col clickable\" title=\"upload images\"> â° </div>\n  <div class=\"commitbutton col clickable\" title=\"List changes and commit\"> âï¸ </div>\n  <div class=\"name col\"></div>\n  <div class=\"editbutton col clickable\" title=\"fragments\"> â </div>\n  <div class=\"helpbutton col clickable\" title=\"help\"> ? </div>\n</div>\n\n<div class=\"main row\">\n  <div class=\"editorpane left col\">\n    <div class=\"updateslist row shadow\"></div>\n    <iframe class=\"uploadsform row shadow\" src=\"{{relPath}}/admin/pub-editor-upload\"></iframe>\n    <textarea class=\"editor row\"></textarea></div>\n  <div class=\"previewpane right col\"><iframe class=\"preview\" src=\"{{relPath}}{{route}}\"></iframe></div>\n</div>\n\n</div>\n<script>window.pubRef = {\"href\":\"{{editorPrefix}}/\",\"relPath\":\"{{relPath}}\"};</script>\n<script src=\"{{relPath}}/js/jquery-1.12.4.min.js\"></script>\n<script src=\"{{relPath}}/pub/js/editor-ui.js\"></script>\n<script src=\"{{relPath}}/pub/_generator.js\"></script>\n\n</body>\n</html>\n"},{"path":"/pub-editor.md","text":"---- /pub/ ----\nname: pub-server\ndoclayout: pub-editor\nnocrawl: 1\n\n\n---- /admin/pub-editor-upload ----\nname: Upload Images\ntemplate: pub-editor-upload\ndoclayout: pub-editor-doclayout\npostandget: 1\nnocrawl: 1\n\n[?file?](upload)\n[?submit? Upload](-)  \n[Markdown will appear below. ?label?](- \"instructions\")\n"}]}],"staticPaths":[{"path":"/Users/jleschner/pub/doc/static","depth":3,"glob":"**/*.{png,pdf,*}","watch":{}},{"path":"/Users/jleschner/pub/doc/.gitignore","watch":{}},{"path":"/Users/jleschner/pub/doc/.nojekyll","watch":{}},{"path":"/Users/jleschner/pub/doc/node_modules/pub-pkg-jquery/js/jquery-1.12.4.min.js","route":"/js","inject":true,"maxAge":"30d","_pkg":"pub-pkg-jquery","watch":false},{"path":"/Users/jleschner/pub/doc/node_modules/github-markdown-css/github-markdown.css","route":"/css","inject":true,"_pkg":"pub-theme-doc","watch":false},{"path":"/Users/jleschner/pub/doc/node_modules/pub-theme-doc/css/pub-theme-doc.css","route":"/css","inject":true,"_pkg":"pub-theme-doc","watch":false},{"path":"/Users/jleschner/pub/doc/node_modules/pub-pkg-prism/css/prism.css","route":"/css","inject":true,"_pkg":"pub-pkg-prism","watch":false},{"path":"/Users/jleschner/pub/doc/node_modules/pub-pkg-font-awesome/fonts","route":"/fonts","_pkg":"pub-pkg-font-awesome","watch":false},{"path":"/Users/jleschner/pub/doc/node_modules/pub-pkg-font-awesome/css/font-awesome.css","route":"/css","inject":true,"_pkg":"pub-pkg-font-awesome","watch":false},{"path":"/Users/jleschner/pub/doc/node_modules/pub-pkg-editor/static/css","route":"/pub/css","_pkg":"pub-pkg-editor","watch":false},{"path":"/Users/jleschner/pub/doc/node_modules/humane-js/themes/flatty.css","route":"/pub/humane-js","_pkg":"pub-pkg-editor","watch":false}],"outputs":[{"path":"/Users/jleschner/pub/doc/docs","relPaths":true,"name":"docs","output":true,"writable":true,"type":"FILE","tmp":"/Users/jleschner/.tmp/docs","watch":{}}],"browserScripts":[{"path":"/Users/jleschner/pub/doc/node_modules/pub-pkg-editor/client/editor-ui.js","route":"/pub/js/editor-ui.js","_pkg":"pub-pkg-editor"},{"path":"/Users/jleschner/pub/doc/node_modules/pub-preview/pub-preview.js","route":"/pub/js/pub-preview.js","_pkg":"pub-pkg-editor"}],"generatorPlugins":[{"path":"/Users/jleschner/pub/doc/node_modules/pub-pkg-editor/generator-plugin.js","_pkg":"pub-pkg-editor"},{"path":"/Users/jleschner/pub/doc/node_modules/pub-pkg-seo/generator-plugin.js","_pkg":"pub-pkg-seo"},{"path":"/Users/jleschner/pub/doc/node_modules/pub-pkg-font-awesome/generator-plugin.js","_pkg":"pub-pkg-font-awesome"},{"path":"/Users/jleschner/pub/doc/node_modules/pub-pkg-prism/generator-plugin.js","_pkg":"pub-pkg-prism"},{"path":"/Users/jleschner/pub/doc/node_modules/pub-theme-doc/plugins/generator-plugin.js","_pkg":"pub-theme-doc"}],"serverPlugins":[],"injectCss":[{"path":"/css/github-markdown.css"},{"path":"/css/pub-theme-doc.css"},{"path":"/css/prism.css"},{"path":"/css/font-awesome.css"}],"injectJs":[{"path":"/js/jquery-1.12.4.min.js"},{"path":"/pub/pub-ux.js"}],"pkgs":[{"path":"pub-pkg-jquery","pkgJson":{"_from":"pub-pkg-jquery@^1.12.4","_id":"pub-pkg-jquery@1.12.4","_inBundle":false,"_integrity":"sha512-OJIVVTReAK65gmYThjsFacqUTZPeNDpjKu6JAoWeZ3HIYf9J3oo9LC07izUeW36fqfkQXWtaT4bm4bplfpyxIQ==","_location":"/pub-pkg-jquery","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"pub-pkg-jquery@^1.12.4","name":"pub-pkg-jquery","escapedName":"pub-pkg-jquery","rawSpec":"^1.12.4","saveSpec":null,"fetchSpec":"^1.12.4"},"_requiredBy":["/pub-server"],"_resolved":"https://registry.npmjs.org/pub-pkg-jquery/-/pub-pkg-jquery-1.12.4.tgz","_shasum":"317b8dc0c545721ffb950c7b84b7d98ce0783ca3","_spec":"pub-pkg-jquery@^1.12.4","_where":"/Users/jleschner/pub/doc/node_modules/pub-server","author":{"name":"jurgen leschner"},"bugs":{"url":"https://github.com/jldec/pub-pkg-jquery/issues"},"bundleDependencies":false,"dependencies":{},"deprecated":false,"description":"pub-server package to inject jQuery","homepage":"https://github.com/jldec/pub-pkg-jquery#readme","keywords":["publish","jquery"],"license":"MIT","main":"pub-config.js","name":"pub-pkg-jquery","repository":{"type":"git","url":"git://github.com/jldec/pub-pkg-jquery.git"},"version":"1.12.4"},"pkgName":"pub-pkg-jquery","dir":"/Users/jleschner/pub/doc/node_modules/pub-pkg-jquery"},{"path":"pub-theme-doc","pkgJson":{"_from":"pub-theme-doc@^1.1.14","_id":"pub-theme-doc@1.1.14","_inBundle":false,"_integrity":"sha512-XQj9yT4Yushl9Ha0T5vMspDm3LVlEJhTiPIivD+ES7MDKCG4Sq7CNIFoycLqbvywcNTSwZ3cfsVVSM4FdErNOg==","_location":"/pub-theme-doc","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"pub-theme-doc@^1.1.14","name":"pub-theme-doc","escapedName":"pub-theme-doc","rawSpec":"^1.1.14","saveSpec":null,"fetchSpec":"^1.1.14"},"_requiredBy":["/pub-server"],"_resolved":"https://registry.npmjs.org/pub-theme-doc/-/pub-theme-doc-1.1.14.tgz","_shasum":"302999237ebfbcaf3e555ae4c3311f7792e140a4","_spec":"pub-theme-doc@^1.1.14","_where":"/Users/jleschner/pub/doc/node_modules/pub-server","author":{"name":"JÃ¼rgen Leschner"},"bugs":{"url":"https://github.com/jldec/pub-theme-doc/issues"},"bundleDependencies":false,"dependencies":{"github-markdown-css":"^4.0.0"},"deprecated":false,"description":"pub-server documentation theme","files":["css/","plugins/","templates/","pub-config.js"],"homepage":"https://github.com/jldec/pub-theme-doc#readme","keywords":["publish","markdown","documentation"],"license":"MIT","main":"pub-config.js","name":"pub-theme-doc","repository":{"type":"git","url":"git://github.com/jldec/pub-theme-doc.git"},"version":"1.1.14"},"pkgName":"pub-theme-doc","dir":"/Users/jleschner/pub/doc/node_modules/pub-theme-doc"},{"path":"pub-pkg-prism","pkgJson":{"_from":"pub-pkg-prism@^2.0.4","_id":"pub-pkg-prism@2.0.4","_inBundle":false,"_integrity":"sha512-x6tjezDTPjBrFdlcIi6mUghfAwc5VeD2ee9ajr+UWmV9+9/2lNBrH/rtqYdOyeS6tm1QbrXSgL8551Uo6k+uBA==","_location":"/pub-pkg-prism","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"pub-pkg-prism@^2.0.4","name":"pub-pkg-prism","escapedName":"pub-pkg-prism","rawSpec":"^2.0.4","saveSpec":null,"fetchSpec":"^2.0.4"},"_requiredBy":["/pub-server"],"_resolved":"https://registry.npmjs.org/pub-pkg-prism/-/pub-pkg-prism-2.0.4.tgz","_shasum":"422faced140b1cbeb963b05ee2d0312328caa569","_spec":"pub-pkg-prism@^2.0.4","_where":"/Users/jleschner/pub/doc/node_modules/pub-server","author":{"name":"JÃ¼rgen Leschner"},"bugs":{"url":"https://github.com/jldec/pub-pkg-prism/issues"},"bundleDependencies":false,"dependencies":{},"deprecated":false,"description":"pub-server plugin for prism.js syntax highlighting","files":["css/","js/","generator-plugin.js","pub-config.js","LICENSE-PRISM"],"homepage":"https://github.com/jldec/pub-pkg-prism#readme","keywords":["publish","syntax","highlight","prism"],"license":"MIT","main":"pub-config.js","name":"pub-pkg-prism","repository":{"type":"git","url":"git://github.com/jldec/pub-pkg-prism.git"},"version":"2.0.4"},"pkgName":"pub-pkg-prism","dir":"/Users/jleschner/pub/doc/node_modules/pub-pkg-prism"},{"path":"pub-pkg-font-awesome","pkgJson":{"_from":"pub-pkg-font-awesome@^3.0.4","_id":"pub-pkg-font-awesome@3.0.4","_inBundle":false,"_integrity":"sha512-kRoZPaHnXFLPYLQbszUKj8zFQEEaSlve6+sDnPzlYgC8Hby7O5NVSdNzhn8YDcpksG0lHsvSoNjSGEZ5vM7F2w==","_location":"/pub-pkg-font-awesome","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"pub-pkg-font-awesome@^3.0.4","name":"pub-pkg-font-awesome","escapedName":"pub-pkg-font-awesome","rawSpec":"^3.0.4","saveSpec":null,"fetchSpec":"^3.0.4"},"_requiredBy":["/pub-server"],"_resolved":"https://registry.npmjs.org/pub-pkg-font-awesome/-/pub-pkg-font-awesome-3.0.4.tgz","_shasum":"07b810de31bf84b5bf94b7299c83ae457451bd7d","_spec":"pub-pkg-font-awesome@^3.0.4","_where":"/Users/jleschner/pub/doc/node_modules/pub-server","author":{"name":"Font Awesome by Dave Gandy - http://fontawesome.io"},"bugs":{"url":"https://github.com/jldec/pub-pkg-font-awesome/issues"},"bundleDependencies":false,"dependencies":{},"deprecated":false,"description":"Use Font Awesome v4.7.0 glyphs from pub-server markdown","devDependencies":{},"files":["css/","fonts/","pub-config.js","generator-plugin.js"],"homepage":"https://github.com/jldec/pub-pkg-font-awesome#readme","keywords":["publish","markdown","icon","font","awesome"],"license":"MIT AND OFL-1.1","main":"pub-config.js","name":"pub-pkg-font-awesome","repository":{"type":"git","url":"git://github.com/jldec/pub-pkg-font-awesome.git"},"scripts":{"docedit":"pub docs-src","docout":"pub -O docs-src","docview":"pub -S docs","readme":"pub"},"version":"3.0.4"},"pkgName":"pub-pkg-font-awesome","dir":"/Users/jleschner/pub/doc/node_modules/pub-pkg-font-awesome"},{"path":"pub-pkg-seo","pkgJson":{"_from":"pub-pkg-seo@^1.0.16","_id":"pub-pkg-seo@1.0.16","_inBundle":false,"_integrity":"sha512-4Xk2mzNo+/JE8dpudpO0CeV9NbRrlz/FmgZPmSOYDkkNSiaYv3T2j3cOLzHx3HBA5BCeDt8RSsu33Gn2IZ5tRQ==","_location":"/pub-pkg-seo","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"pub-pkg-seo@^1.0.16","name":"pub-pkg-seo","escapedName":"pub-pkg-seo","rawSpec":"^1.0.16","saveSpec":null,"fetchSpec":"^1.0.16"},"_requiredBy":["/pub-server"],"_resolved":"https://registry.npmjs.org/pub-pkg-seo/-/pub-pkg-seo-1.0.16.tgz","_shasum":"70a5654fd0e75d4f361b414b78624ffccbe8d9bf","_spec":"pub-pkg-seo@^1.0.16","_where":"/Users/jleschner/pub/doc/node_modules/pub-server","author":{"name":"JÃ¼rgen Leschner"},"bugs":{"url":"https://github.com/jldec/pub-pkg-seo/issues"},"bundleDependencies":false,"dependencies":{},"deprecated":false,"description":"pub-server package for generating robots.txt and sitemap.xml","devDependencies":{"eslint":"^7.13.0","pub-generator":"^4.1.1","pub-resolve-opts":"^1.9.2","pub-src-fs":"^2.1.2","tape":"^5.0.1"},"files":["pub-config.js","generator-plugin.js","src/"],"homepage":"https://github.com/jldec/pub-pkg-seo#readme","keywords":["publish","seo","robots","sitemap"],"license":"MIT","main":"pub-config.js","name":"pub-pkg-seo","repository":{"type":"git","url":"git://github.com/jldec/pub-pkg-seo.git"},"scripts":{"test":"eslint . && tape test/norobots/norobots.test.js && tape test/yesrobots/yesrobots.test.js "},"version":"1.0.16"},"pkgName":"pub-pkg-seo","dir":"/Users/jleschner/pub/doc/node_modules/pub-pkg-seo"},{"path":"pub-pkg-editor","pkgJson":{"_from":"pub-pkg-editor@^2.0.3","_id":"pub-pkg-editor@2.0.3","_inBundle":false,"_integrity":"sha512-1vvJQ1nCkdaxIeSr+KUKyXLmF4BB5s2Notv7ncz/9BIToay9dASpQJH0OZFCUvZnagFOHwW8dArm3iN0lZbVIA==","_location":"/pub-pkg-editor","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"pub-pkg-editor@^2.0.3","name":"pub-pkg-editor","escapedName":"pub-pkg-editor","rawSpec":"^2.0.3","saveSpec":null,"fetchSpec":"^2.0.3"},"_requiredBy":["/pub-server"],"_resolved":"https://registry.npmjs.org/pub-pkg-editor/-/pub-pkg-editor-2.0.3.tgz","_shasum":"fa4a41bde67378ffe1578749067dfe1ff8faaaf1","_spec":"pub-pkg-editor@^2.0.3","_where":"/Users/jleschner/pub/doc/node_modules/pub-server","author":{"name":"JÃ¼rgen Leschner"},"bugs":{"url":"https://github.com/jldec/pub-pkg-editor/issues"},"bundleDependencies":false,"dependencies":{"humane-js":"^3.2.2","pub-preview":"^1.3.7"},"deprecated":false,"description":"simple markdown editor for pub-server","devDependencies":{},"files":["client/","src/","static/","pub-config.js","generator-plugin.js"],"homepage":"https://github.com/jldec/pub-pkg-editor#readme","license":"MIT","main":"pub-config.js","name":"pub-pkg-editor","repository":{"type":"git","url":"git://github.com/jldec/pub-pkg-editor.git"},"version":"2.0.3"},"pkgName":"pub-pkg-editor","dir":"/Users/jleschner/pub/doc/node_modules/pub-pkg-editor"}],"appUrl":"https://jldec.github.io/pub-doc","docTitle":"pub-server","docSubTitle":"documentation","github":"https://github.com/jldec/pub-server","copyright":"Copyright (c) 2015-2020 JÃ¼rgen Leschner - github.com/jldec - MIT license","editorPrefix":"/pub","theme":{"path":"pub-theme-doc","pkgJson":{"_from":"pub-theme-doc@^1.1.14","_id":"pub-theme-doc@1.1.14","_inBundle":false,"_integrity":"sha512-XQj9yT4Yushl9Ha0T5vMspDm3LVlEJhTiPIivD+ES7MDKCG4Sq7CNIFoycLqbvywcNTSwZ3cfsVVSM4FdErNOg==","_location":"/pub-theme-doc","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"pub-theme-doc@^1.1.14","name":"pub-theme-doc","escapedName":"pub-theme-doc","rawSpec":"^1.1.14","saveSpec":null,"fetchSpec":"^1.1.14"},"_requiredBy":["/pub-server"],"_resolved":"https://registry.npmjs.org/pub-theme-doc/-/pub-theme-doc-1.1.14.tgz","_shasum":"302999237ebfbcaf3e555ae4c3311f7792e140a4","_spec":"pub-theme-doc@^1.1.14","_where":"/Users/jleschner/pub/doc/node_modules/pub-server","author":{"name":"JÃ¼rgen Leschner"},"bugs":{"url":"https://github.com/jldec/pub-theme-doc/issues"},"bundleDependencies":false,"dependencies":{"github-markdown-css":"^4.0.0"},"deprecated":false,"description":"pub-server documentation theme","files":["css/","plugins/","templates/","pub-config.js"],"homepage":"https://github.com/jldec/pub-theme-doc#readme","keywords":["publish","markdown","documentation"],"license":"MIT","main":"pub-config.js","name":"pub-theme-doc","repository":{"type":"git","url":"git://github.com/jldec/pub-theme-doc.git"},"version":"1.1.14"},"pkgName":"pub-theme-doc","dir":"/Users/jleschner/pub/doc/node_modules/pub-theme-doc"},"_resolved":true,"production":false,"port":"3001","fqImages":"","linkNewWindow":false,"staticHost":true}